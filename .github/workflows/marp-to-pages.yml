name: marp-to-pages
concurrency: marp-to-pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ensure build dir exists
        run: mkdir -p build

      - name: Find Marp markdown files
        id: find-md
        run: |
          # Find markdown files containing "marp: true" and output as JSON array
          echo "files=$(find . -type f -name "*.md" ! -path "./.github/*" ! -path "./build/*" -exec sh -c 'grep -l "marp: true" "$1"' sh {} \; | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

      - name: Process markdown files
        run: |
          for file in $(echo '${{ steps.find-md.outputs.files }}' | jq -r '.[]'); do
            dir=$(dirname "$file")
            filename=$(basename "$file" .md)
            target_dir="build/$dir"
            
            # Create target directory
            mkdir -p "$target_dir"
            
            # Copy all images from the source directory
            find "$dir" -maxdepth 1 -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.gif" \) -exec cp {} "$target_dir/" \;
            
            # Generate HTML
            docker run --rm -u root:root -v $PWD:/work -w /work marpteam/marp-cli:v3.0.2 \
              "$file" -o "$target_dir/$filename.html" --allow-local-files
            
            # Generate PDF
            docker run --rm -u root:root -v $PWD:/work -w /work marpteam/marp-cli:v3.0.2 \
              "$file" --allow-local-files -o "$target_dir/$filename.pdf"
            
            # Generate PPTX
            docker run --rm -u root:root -v $PWD:/work -w /work marpteam/marp-cli:v3.0.2 \
              "$file" --allow-local-files -o "$target_dir/$filename.pptx"
          done

      - name: Deploy preview
        if: ${{ github.event_name == 'pull_request' }}
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./build/
          preview-branch: gh-pages
          umbrella-dir: pr-preview

      - name: Deploy production
        if: ${{ github.event_name == 'push' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: ./build/
          clean-exclude: pr-preview/ 