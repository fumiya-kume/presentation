name: marp-to-pages
concurrency: marp-to-pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ensure build dir exists
        run: mkdir -p build

      - name: Find Marp markdown files and prepare paths
        id: find-md
        run: |
          echo "Looking for Marp markdown files..."
          echo "Found markdown files:"
          find . -type f -name "*.md" ! -path "./.github/*" ! -path "./build/*"
          echo "Checking for marp: true..."
          
          # Create a temporary directory for processed files
          mkdir -p temp_processed
          
          # Find Marp files and process paths
          while IFS= read -r file; do
            # Convert spaces to hyphens in the path
            new_path=$(echo "$file" | sed 's/ /-/g')
            # Create directory structure
            mkdir -p "$(dirname "temp_processed/$new_path")"
            # Copy file to new location
            cp "$file" "temp_processed/$new_path"
            # Output the processed path
            echo "$new_path"
          done < <(find . -type f -name "*.md" ! -path "./.github/*" ! -path "./build/*" ! -path "./temp_processed/*" -exec sh -c 'grep -l "marp: true" "$1"' sh {} \;) | \
          # Create JSON array of processed paths
          jq -R -s -c 'split("\n")[:-1]' > temp_files.json
          
          files=$(cat temp_files.json)
          echo "Found files: $files"
          echo "files=$files" >> $GITHUB_OUTPUT

      - name: Process markdown files
        run: |
          echo "Files to process: ${{ steps.find-md.outputs.files }}"
          while IFS= read -r file; do
            echo "Processing: ${file}"
            dir="$(dirname "${file}")"
            filename="$(basename "${file}")"
            filename="${filename%.md}"  # Remove .md extension after basename
            target_dir="build/${dir}"
            
            # Create target directory
            mkdir -p "${target_dir}"
            
            # Copy all images from the source directory
            # Convert spaces to hyphens in image filenames
            original_dir=$(echo "$dir" | sed 's/-/ /g')
            find "${original_dir}" -maxdepth 1 -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.gif" \) -exec sh -c '
              for img; do
                new_name=$(basename "$img" | sed "s/ /-/g")
                cp "$img" "'${target_dir}'/${new_name}"
              done
            ' sh {} +
            
            # Generate HTML
            docker run --rm -u root:root -v "$(pwd)/temp_processed:/work" -w /work marpteam/marp-cli:v3.0.2 \
              "/work/${file}" -o "/work/../build/${target_dir}/${filename}.html" --allow-local-files
            
            # Generate PDF
            docker run --rm -u root:root -v "$(pwd)/temp_processed:/work" -w /work marpteam/marp-cli:v3.0.2 \
              "/work/${file}" --allow-local-files -o "/work/../build/${target_dir}/${filename}.pdf"
            
            # Generate PPTX
            docker run --rm -u root:root -v "$(pwd)/temp_processed:/work" -w /work marpteam/marp-cli:v3.0.2 \
              "/work/${file}" --allow-local-files -o "/work/../build/${target_dir}/${filename}.pptx"
          done < <(echo '${{ steps.find-md.outputs.files }}' | jq -r '.[]')
          
          # Clean up temporary files
          rm -rf temp_processed temp_files.json

      - name: Deploy preview
        if: ${{ github.event_name == 'pull_request' }}
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./build/
          preview-branch: gh-pages
          umbrella-dir: pr-preview

      - name: Deploy production
        if: ${{ github.event_name == 'push' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: ./build/
          clean-exclude: pr-preview/ 