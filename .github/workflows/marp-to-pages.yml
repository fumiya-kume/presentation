name: marp-to-pages
concurrency: marp-to-pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed for git log to work properly

      - name: Find Marp markdown files
        id: find-md
        run: |
          # Find all Marp markdown files and convert to JSON array
          files=$(find . -type f -name "*.md" ! -path "./.github/*" ! -path "./build/*" -exec grep -l "marp: true" {} \; | \
                 sed -e 's|^\./||' | jq -R -s -c 'split("\n")[:-1]')
          echo "Found files: $files"
          echo "files=$files" >> $GITHUB_OUTPUT

      - name: Create build directory
        run: mkdir -p build

      - name: Process markdown files and generate metadata
        id: process
        run: |
          # Function to generate output in different formats using GitHub Actions' Docker support
          generate_output() {
            local input="$1" output="$2"
            local output_dir=$(dirname "$output")
            
            echo "Generating $output from $input"
            echo "Ensuring output directory $output_dir exists"
            mkdir -p "$output_dir"
            
            docker run --rm \
              -v "$(pwd):/work" \
              -w /work \
              -e MARP_USER="root:root" \
              marpteam/marp-cli:v3.0.2 \
              "/work/${input}" --allow-local-files -o "/work/${output}"
          }

          # Function to copy images
          copy_images() {
            local src="$1" dst="$2"
            echo "Copying images from $src to $dst"
            mkdir -p "$dst"
            if [ -d "$src" ]; then
              find "$src" -maxdepth 1 -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.gif" \) \
                -exec cp {} "$dst/" \;
            fi
          }

          # Function to extract metadata from markdown
          extract_metadata() {
            local file="$1"
            local title description
            
            # Extract title (first h1)
            title=$(grep -m 1 "^# " "$file" | sed 's/^# //')
            
            # Extract description (first paragraph after title)
            description=$(awk '/^# /{p=1;next} p&&/^[^#]/{print;exit}' "$file" | tr -d '\n')
            
            # Get last modified date
            lastModified=$(git log -1 --format=%aI "$file")
            
            # Output as JSON
            jq -n \
              --arg title "$title" \
              --arg path "${file%.*}" \
              --arg description "$description" \
              --arg lastModified "$lastModified" \
              '{
                title: $title,
                path: $path,
                description: $description,
                lastModified: $lastModified,
                formats: {
                  html: ($path + ".html"),
                  pdf: ($path + ".pdf")
                }
              }'
          }

          # Process each markdown file
          echo "Files to process: ${{ steps.find-md.outputs.files }}"
          
          # Initialize metadata array
          echo '{"presentations":[]}' > metadata.json
          
          while IFS= read -r file; do
            echo "Processing: ${file}"
            
            # Prepare directories
            dir=$(dirname "$file")
            filename=$(basename "$file" .md)
            target_dir="build/${dir}"
            mkdir -p "$target_dir"
            
            # Copy images
            copy_images "$dir" "$target_dir"
            
            # Generate all formats
            generate_output "$file" "${target_dir}/${filename}.html"
            generate_output "$file" "${target_dir}/${filename}.pdf"
            generate_output "$file" "${target_dir}/${filename}.pptx"
            
            # Extract and add metadata
            metadata=$(extract_metadata "$file")
            jq --argjson meta "$metadata" '.presentations += [$meta]' metadata.json > metadata.json.tmp
            mv metadata.json.tmp metadata.json
          done < <(echo '${{ steps.find-md.outputs.files }}' | jq -r '.[]')
          
          # Copy metadata.json to build directory
          cp metadata.json build/
          
          # Check if metadata has changed
          if ! git diff --quiet metadata.json; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit metadata if changed
        if: steps.process.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add metadata.json
          git commit -m "Update metadata.json [skip ci]"
          git push

      - name: Deploy preview
        if: ${{ github.event_name == 'pull_request' }}
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./build/
          preview-branch: gh-pages
          umbrella-dir: pr-preview

      - name: Deploy production
        if: ${{ github.event_name == 'push' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: ./build/
          clean-exclude: pr-preview/ 